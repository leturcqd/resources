def position(x):
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz '
    i = 0
    while x != alphabet[i] and i < 52 :
        i+=1
    if i < 25 :
        return(i)
    elif i < 51 :
        return(i- 26)
    elif x in "éèêëÉÈÊËÆæŒœ" :
        return(4)
    elif x in "àâäÀÂÄ" :
        return(0)
    elif x in "îïÎÏ" :
        return(8)
    elif x in "ôöÔÖ" :
        return(14)
    elif x in "ûüÛÜÙù" :
        return(20)
    else :
        return(26)
    
    
def lettre(i):
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'
    return alphabet[i]


    
def rotor(x, l):
    # l est le mot de l'alphabet chiffré (la liste des lettres du rotor), et x la lettre à chiffrer
    i = position(x)   # i est la position de la lettre dans l'alphabet usuel (entre 0 et 25)
    return l[i]    # on renvoie la i eme lettre de l'alphabet chiffré
    
    
def rotorinverse(x, l):
    # on passe à travers la roue dans le sens inverse cette fois
    i = 0
    while l[i] != x :
        i = i +1
    return lettre(i)
    
    
    
def enigma(i,j,k, connexions) : # i j et k sont les numéros de rotors choisis, parmi 0, 1, 2, 3, 4 et connexions est une liste de mots de deux lettres représentant les lettres échangées ce jour-ci
    a = b = c = 0 # a, b et c sont le nombre de mouvements effectués par les trois rotors
    # liste des cinq rotors, et choix de trois parmi ces cinq en fonction des paramètres du jour
    rotora = "XJTLYICMQAOSKWPFEHUGBNDRZV"
    rotorb = "RHQFBEVWSMTDPLXAIGUZYONJCK"
    rotorc = "YHKGAETNCPVBOIWRQMXFLZJUSD"
    rotord = "YCRFXWSBGQTJPNUOIHLZAMDKEV"
    rotore = "GXHZBOJCSYFEMRWPITQLDANVKU"
    rotors = [rotora, rotorb,rotorc,rotord,rotore]
    A = rotors[i]
    B = rotors[j]
    C = rotors[k]
    # Le reflecteur composé de treize transpositions disjointes
    reflecteur = "HDPBIXZAEJUSOWMCQYLVKTNFRG"
    def filtre(x) : # on code une petite boucle qui échange une lettre suivant les connexions si elle y apparait
        y=x.upper()
        for m in connexions :
            if x == m[0].upper() :
                y = m[1].upper()
            if x == m[1].upper() :
                y = m[0].upper()
        return y
    # procédure faisant tourner un rotor d'un cran(l sera donc A, B ou C)
    def rotation(l):
        z = l[0]
        return(l[1:]+ z)
    #demande du message à l'utilisateur
    message=input("Saisir le message à coder :")
    message_compatible = ""
    for x in message :
        if position(x)!= 26 : #on vérifie si x est une lettre
            message_compatible = message_compatible + x.upper()
    # on fabrique un mot vide que l'on va remplir avec les lettres saisies une par une
    cryptogramme = ""
    print(message_compatible)
    for lettre in message_compatible :  # on passe chaque lettre dans les trois rotors, le réflecteur, puis de nouveau les trois rotors (à l'envers) et les connexions
        lettre= filtre(lettre)
        lettre = rotor(lettre,A)
        lettre = rotor(lettre, B)
        lettre = rotor(lettre, C)
        lettre= rotor(lettre, reflecteur)
        lettre = rotorinverse(lettre,C)
        lettre = rotorinverse(lettre, B)
        lettre = rotorinverse(lettre, A)
        lettre = filtre(lettre)
        cryptogramme = cryptogramme + lettre
        A = rotation(A) # on fait tourner le premier rotor
        a = a+1
        if a == 26 : # si on a fini un tour complet du premier rotor, le second tourne
            B = rotation(B)
            b = b+1
            a = 0
        if b == 26 : # si cela fait également tourner d'un tour complet le second rotor, on enclenche le troisième
            C = rotation(C)
            c = c+1
            b=0
    print(cryptogramme)
    return cryptogramme
    
